type Confession {
    content: String!
    createdAt: Float
    id: Int
}

type ConfessionPage {
    items: [Confession!]!
    metadata: PageMetadata!
}

scalar Date

type Mutation {
    confess(content: String!): Confession!
    createPost(content: String!): Post!
    deletePost(id: String!): Post!
    editProfile(gender: String, bio: String, pronouns: String, personalEmail: String): RegisteredUser!
    followUser(id: Int!): Boolean!
    likePost(post: String!): Boolean!
    restorePost(id: String!): Post!
    unfollowUser(id: Int!): Boolean!
    unlikePost(post: String!): Boolean!
}

type PageMetadata {
    page: Int!
    pageCount: Int!
    per: Int!
    total: Int!
}

type Post {
    content: String!
    createdAt: Float
    creator: RegisteredUser!
    creatorId: Int!
    deleted: Boolean!
    id: String
    likes: [RegisteredUser!]!
    likesCount: Int!
}

type Query {
    confessions(page: Int!, per: Int!): ConfessionPage!
    post(id: String!): Post!
    posts(creator: Int!): [Post!]!
    recentPosts(count: Int!, before: Int): [Post!]!
    self: RegisteredUser!
    user(id: Int!): RegisteredUser!
}

type RegisteredUser {
    bio: String
    branch: String!
    collegeId: String!
    dateRegistered: Float
    email: String!
    followerCount: Int!
    followers: [RegisteredUser!]!
    following: [RegisteredUser!]!
    followingCount: Int!
    gender: String!
    id: Int
    name: String!
    personalEmail: String
    phone: String!
    posts: [Post!]!
    pronouns: String
}

type UnregisteredUser {
    branch: String!
    collegeId: String
    email: String!
    gender: String!
    name: String!
    phone: String!
}

scalar UUID
