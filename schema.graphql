type Confession {
  content: String!
  createdAt: Float
  deletedAt: Float
  id: Int
}

type ConfessionPage {
  items: [Confession!]!
  metadata: PageMetadata!
}

scalar Date

type Mutation {
  archivePost(id: String!): Post!
  confess(content: String!): Confession!
  createPost(content: String!): Post!
  deletePost(id: String!): Post!
  editProfile(bio: String, pronouns: String): RegisteredUser!
  followUser(id: Int!): Int!
  likeConfession(id: Int!): Int!
  likePost(id: String!): Int!
  replyToPost(to: String!, content: String!): Post!
  restorePost(id: String!): Post!
  unfollowUser(id: Int!): Int!
  unlikeConfession(id: Int!): Int!
  unlikePost(id: String!): Int!
}

type PageMetadata {
  page: Int!
  pageCount: Int!
  per: Int!
  total: Int!
}

type Post {
  content: String!
  createdAt: Float
  creator: RegisteredUser!
  creatorId: Int!
  deletedAt: Float
  id: String
  likes(page: Int!, per: Int!): RegisteredUserPage!
  likesCount: Int!
  replies(page: Int!, per: Int!): PostPage!
  selfLiked: Boolean!
}

type PostPage {
  items: [Post!]!
  metadata: PageMetadata!
}

type Query {
  confessions(page: Int!, per: Int!): ConfessionPage!
  latestConfession: Confession
  post(id: String!): Post!
  posts(creator: Int!, page: Int!, per: Int!): PostPage!
  recentPosts(count: Int!, before: Int): [Post!]!
  self: RegisteredUser!
  user(id: Int!): RegisteredUser!
}

type RegisteredUser {
  avatarHash: String
  bio: String
  branch: String!
  collegeId: String!
  dateRegistered: Float
  email: String!
  followedBySelf: Boolean!
  followerCount: Int!
  followers(page: Int!, per: Int!): RegisteredUserPage!
  following(page: Int!, per: Int!): RegisteredUserPage!
  followingCount: Int!
  followsSelf: Boolean!
  gender: String!
  id: Int
  isSelf: Boolean!
  name: String!
  personalEmail: String
  phone: String!
  posts(page: Int!, per: Int!): PostPage!
  pronouns: String
}

type RegisteredUserPage {
  items: [RegisteredUser!]!
  metadata: PageMetadata!
}

type UnregisteredUser {
  branch: String!
  collegeId: String
  email: String!
  gender: String!
  name: String!
  phone: String!
}

scalar UUID

